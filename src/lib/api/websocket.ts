import { io, type Socket } from "socket.io-client";
import { config } from "@/lib/config";
import { auth } from "./client";
import toast from "react-hot-toast";

// –°–æ–±—ã—Ç–∏—è WebSocket
export enum SocketEvents {
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  CONNECT = "connect",
  DISCONNECT = "disconnect",
  ERROR = "error",

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  AUTHENTICATE = "authenticate",
  AUTHENTICATED = "authenticated",

  // –°–æ–æ–±—â–µ–Ω–∏—è
  MESSAGE_NEW = "message:new",
  MESSAGE_SENT = "message:sent",
  MESSAGE_READ = "message:read",
  MESSAGE_TYPING = "message:typing",

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞
  SUPPORT_NEW = "support:new",
  SUPPORT_CLAIM = "support:claim",
  SUPPORT_CLAIMED = "support:claimed",

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  NOTIFICATION_NEW = "notification:new",

  // –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  USER_STATUS = "user:status",

  // –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  BROADCAST_SEND = "broadcast:send",
  BROADCAST_SENT = "broadcast:sent",
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π
export interface AuthResponse {
  success: boolean;
  userId?: number;
  role?: string;
  error?: string;
}

export interface MessageData {
  recipientId?: number | null;
  content: string;
  chatId?: string;
}

export interface MessageDTO {
  id: number;
  content: string;
  senderId: number;
  senderName: string;
  recipientId?: number;
  recipientName?: string;
  chatId: string;
  createdAt: string;
  read: boolean;
  type: "DIRECT" | "SUPPORT" | "BROADCAST";
}

export interface TypingEvent {
  chatId: string;
  userId: number;
  isTyping: boolean;
}

export interface UserStatusEvent {
  userId: number;
  status: "online" | "offline";
}

export interface NotificationEvent {
  type: "broadcast" | "message" | "order" | "system";
  title: string;
  message: string;
  from?: string;
  data?: Record<string, unknown>;
}

export interface BroadcastData {
  target: "all" | "users" | "cosmetologists";
  title: string;
  message: string;
}

// Callback types
type MessageCallback = (message: MessageDTO) => void;
type TypingCallback = (event: TypingEvent) => void;
type StatusCallback = (event: UserStatusEvent) => void;
type NotificationCallback = (event: NotificationEvent) => void;

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
class WebSocketClient {
  private socket: Socket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private isAuthenticated = false;

  // Callbacks storage
  private messageCallbacks: Set<MessageCallback> = new Set();
  private typingCallbacks: Set<TypingCallback> = new Set();
  private statusCallbacks: Set<StatusCallback> = new Set();
  private notificationCallbacks: Set<NotificationCallback> = new Set();

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
  connect(): void {
    if (this.socket?.connected) {
      return;
    }

    const tokens = auth.getTokens();
    if (!tokens?.accessToken) {
      console.warn("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
    const wsUrl = `${config.api.wsUrl}:9092`;

    this.socket = io(wsUrl, {
      transports: ["websocket", "polling"],
      query: {
        token: tokens.accessToken,
      },
      reconnection: true,
      reconnectionAttempts: this.maxReconnectAttempts,
      reconnectionDelay: this.reconnectDelay,
    });

    this.setupEventListeners();
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isAuthenticated = false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected(): boolean {
    return this.socket?.connected || false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  isAuth(): boolean {
    return this.isAuthenticated && this.isConnected();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
  private emit<T = unknown>(event: string, data?: T): void {
    if (!this.socket?.connected) {
      toast.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
      return;
    }

    if (!this.isAuthenticated && event !== SocketEvents.AUTHENTICATE) {
      toast.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è");
      return;
    }

    this.socket.emit(event, data);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  sendMessage(
    recipientId: number | null,
    content: string,
    chatId?: string,
  ): void {
    const data: MessageData = {
      recipientId,
      content,
      chatId,
    };

    this.emit(SocketEvents.MESSAGE_NEW, data);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
  sendSupportMessage(content: string): void {
    this.sendMessage(null, content);
  }

  // –ê–¥–º–∏–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  claimSupportRequest(userId: number, initialMessage: string): void {
    this.emit(SocketEvents.SUPPORT_CLAIM, {
      userId,
      initialMessage,
    });
  }

  // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  markMessageAsRead(chatId: string, senderId?: number): void {
    this.emit(SocketEvents.MESSAGE_READ, { chatId, senderId });
  }

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
  sendTypingStatus(
    chatId: string,
    recipientId: number,
    isTyping: boolean,
  ): void {
    this.emit(SocketEvents.MESSAGE_TYPING, {
      chatId,
      recipientId,
      typing: isTyping,
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  sendBroadcast(data: BroadcastData): void {
    this.emit(SocketEvents.BROADCAST_SEND, data);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  onMessage(callback: MessageCallback): () => void {
    this.messageCallbacks.add(callback);
    return () => this.messageCallbacks.delete(callback);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
  onTyping(callback: TypingCallback): () => void {
    this.typingCallbacks.add(callback);
    return () => this.typingCallbacks.delete(callback);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  onUserStatus(callback: StatusCallback): () => void {
    this.statusCallbacks.add(callback);
    return () => this.statusCallbacks.delete(callback);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  onNotification(callback: NotificationCallback): () => void {
    this.notificationCallbacks.add(callback);
    return () => this.notificationCallbacks.delete(callback);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  private setupEventListeners(): void {
    if (!this.socket) return;

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on(SocketEvents.CONNECT, () => {
      console.log("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
      this.reconnectAttempts = 0;

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const tokens = auth.getTokens();
      if (tokens?.accessToken) {
        this.emit(SocketEvents.AUTHENTICATE, { token: tokens.accessToken });
      }
    });

    // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    this.socket.on(SocketEvents.AUTHENTICATED, (data: AuthResponse) => {
      if (data.success) {
        console.log("WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", data);
        this.isAuthenticated = true;
        toast.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      } else {
        console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", data.error);
        toast.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
        this.disconnect();
      }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on(SocketEvents.DISCONNECT, (reason: string) => {
      console.log("WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:", reason);
      this.isAuthenticated = false;

      if (reason === "io server disconnect") {
        // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª
        toast.error("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º");
      } else if (reason === "transport close") {
        // –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
        toast.error("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      }
    });

    // –û—à–∏–±–∫–∏
    this.socket.on(SocketEvents.ERROR, (error: { message: string }) => {
      console.error("WebSocket –æ—à–∏–±–∫–∞:", error);
      toast.error(error.message || "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
    });

    // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on("connect_error", (error: Error) => {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:", error);
      this.reconnectAttempts++;

      if (this.reconnectAttempts >= this.maxReconnectAttempts) {
        console.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
        this.disconnect();
      }
    });

    // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.socket.on(SocketEvents.MESSAGE_NEW, (message: MessageDTO) => {
      this.messageCallbacks.forEach((cb) => cb(message));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast(`${message.senderName}: ${message.content}`, {
        duration: 4000,
        icon: "üí¨",
      });
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.socket.on(SocketEvents.MESSAGE_SENT, (message: MessageDTO) => {
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", message);
      this.messageCallbacks.forEach((cb) => cb(message));
    });

    // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
    this.socket.on(
      SocketEvents.MESSAGE_READ,
      (data: { chatId: string; readBy: number }) => {
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ:", data);
      },
    );

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    this.socket.on(SocketEvents.MESSAGE_TYPING, (event: TypingEvent) => {
      this.typingCallbacks.forEach((cb) => cb(event));
    });

    // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.socket.on(SocketEvents.SUPPORT_NEW, (message: MessageDTO) => {
      this.messageCallbacks.forEach((cb) => cb(message));

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      toast.custom(
        `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç ${message.senderName}: ${message.content}`,
        {
          duration: 0, // –ù–µ –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          icon: "üÜò",
        },
      );
    });

    // –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–±—Ä–∞–Ω
    this.socket.on(
      SocketEvents.SUPPORT_CLAIMED,
      (data: { success: boolean; message?: string }) => {
        if (data.success) {
          toast.success("–í—ã –≤–∑—è–ª–∏ –∑–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É");
        } else {
          toast.error(
            data.message || "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º",
          );
        }
      },
    );

    // –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.socket.on(SocketEvents.USER_STATUS, (event: UserStatusEvent) => {
      this.statusCallbacks.forEach((cb) => cb(event));
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.socket.on(
      SocketEvents.NOTIFICATION_NEW,
      (notification: NotificationEvent) => {
        this.notificationCallbacks.forEach((cb) => cb(notification));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const fromText = notification.from ? ` –û—Ç: ${notification.from}` : "";
        toast(`${notification.title}: ${notification.message}${fromText}`, {
          duration: 6000,
          icon: "üì¢",
        });
      },
    );

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.socket.on(
      SocketEvents.BROADCAST_SENT,
      (data: { success: boolean }) => {
        if (data.success) {
          toast.success("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
        }
      },
    );
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const wsClient = new WebSocketClient();

// Hook –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export function useWebSocket() {
  return wsClient;
}
